# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches:
      - master
      - develop
      - 'release/*'
      - 'fix/*'
      - 'poc/*'
  pull_request:
    branches:
      - master
      - develop
      - 'release/*'
      - 'fix/*'
      - 'poc/*'
jobs:
  build-and-test:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/upload-artifact@v4

      # Ensure gradlew has executable permissions
      - name: Set execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Build with Gradle Wrapper
        run: ./gradlew build
      - name: Run Jacoco Test Coverage Report
        run: ./gradlew jacocoTestCoverageVerification

      - name: Run tests and generate coverage report
        run: ./gradlew test jacocoTestReport

      - name: Check code coverage
        run: ./gradlew jacocoTestCoverageVerification
        continue-on-error: true

      - name: Upload code coverage report as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
         name: jacoco-report
         path: build/reports/jacoco/test/html/

      - name: Fail if coverage is below 73%
        run: |
         coverage=$(./gradlew jacocoTestReport --quiet && tail -n 10 build/reports/jacoco/test/html/index.html | grep -o 'coveragePercent.*' | sed 's/[^0-9]*//g')
         if (( $(echo "$coverage < 73" | bc -l) )); then
         echo "Code coverage is below 73%, current coverage: $coverage%" && exit 1;
         else
         echo "Code coverage is $coverage%, which meets the minimum requirement.";
         fi
    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
        with:
         gradle-version: '8.11.1'

      - name: Build with Gradle 8.11.1
        run: gradle build
